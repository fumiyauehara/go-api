version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "43306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d/
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "mysql -u root -proot -e 'SELECT 1 FROM normal_db.tenants LIMIT 1;'"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql_test:
    image: mysql:latest
    container_name: mysql_test
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "43316:3306"
    volumes:
      - ./docker/mysql/init:/docker-entrypoint-initdb.d/
    networks:
      - backend

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  app1:
    build:
      context: .
      dockerfile: docker/app/prod.Dockerfile
      args:
        ENV_NAME: ".env.local"
        APP_PORT: "${APP_PORT}"
    container_name: app1
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - backend

  app2:
    build:
      context: .
      dockerfile: docker/app/prod.Dockerfile
      args:
        ENV_NAME: ".env.local"
        APP_PORT: "${APP_PORT}"
    container_name: app2
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app1
      - app2
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  mysql_data:
